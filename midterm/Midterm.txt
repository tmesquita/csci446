Midterm for csci446
Thomas Mesquita

1. The difference between a put and post request is that POST identifies the resource that will handle the enclosed entity whereas a PUT identifies the entity enclosed with the request

2. It is relative

3. An abosulte link is the absolute path, that is it is accessible from a domain other than yours, relative links depend on where you currently are

4. http post

5. There is a query string, it is 'request_type=PUT'

6. a title attribute

7. The database stores and persistes the data and state of the application. The browser displays the data.

8. Yes it would usually contain a body, this is because of the status code of 200 and the use of Etag, if the etag determined that the content was not modified we would have recieved a 304 response code and the body would not have been sent. Since we have a 200 code I think is it safe to assume that it contains a body, unless of course it was a HEAD request. 

RUBY
9.
class Troll
	attr_accessor :ugliness, :smelliness, :strength

	def initialize(grunt="UNGAH")
		@grunt = grunt
	end
	
	def speak
		puts @grunt * 42
	end

	def reverse
		puts @grunt.reverse
	end

	def self.propogate
		Troll.new("eegah")
	end
end

10. we are missing the "fight" method from our class definition

11. yes, respond_to? is inherited

12. boolean

13. the method without the bang will return a copy of the original with what ever modification the method did to it. The method with the bang(!) will change the object itself that called the method.

14. Duck typing, if it walks like a duck and talks like a duck, it must be a duck. the objects methods and properties are what determine it's semantics.

15. %w yeilds an array of strings

16. Yes

17. No, no explicit return statement is needed. Ruby has implicit return, that it is will return the value from the last expression it evaluated

RAILS
18. before_validation, before_create, before_save, after_create

19. | Method | controller action | CRUD operation |
	|  GET	 |		index		 |		READ	  |
	|  GET	 |		new			 |		READ	  |
	|  POST	 |		create		 |		CREATE	  |
	|  GET	 |		edit		 |		READ	  |
	|  PUT   |		update		 |		UPDATE	  |
	| DELETE |		delete		 |		DELETE	  |

20. Ruby simulates these methods because many browers don't support them

21. One differencesbetween rails production and development environments are that in production models will be cached in memory, whereas in development the model is read each time it receives a request

22. When there will only be type of that model, or it's a controller for a model that doesn't exsist

23. A rails helper method that abstracts processing out of a view to keep our views DRY. A helper method should be create when there is repeated code in the view

24. A table with a bee_id and flower_id columns to establish the many:many relationship

25. I would say that this is OK because it gets done what it is meant to. However, the number of queries can be reduced by using find_by_sql()